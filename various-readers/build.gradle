/*
 * Copyright (c) 2017 Dell Inc., or its subsidiaries. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 */
apply plugin: "distribution"
apply plugin: "java"
apply plugin: "maven"
apply plugin: "application"
apply plugin: "maven-publish"
apply plugin: 'com.github.johnrengelman.shadow'

sourceCompatibility = "1.8"

archivesBaseName = "various-readers"

group = "com.dellemc.oe.readers"
version = samplesVersion
archivesBaseName = "various-readers"
description = "various-readers"
mainClassName = "com.dellemc.oe.readers.JSONReader"
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile project(':common')
    compile "org.slf4j:slf4j-api:${slf4jApiVersion}"
    compile "ch.qos.logback:logback-classic:${logbackVersion}"
    compile "ch.qos.logback:logback-core:${logbackVersion}"
    compile "io.pravega:pravega-connectors-flink-${flinkShortVersion}_${flinkScalaVersion}:${pravegaFlinkConnectorVersion}"
    compile "org.apache.flink:flink-streaming-java_${flinkScalaVersion}:${flinkVersion}"
    compile "org.apache.flink:flink-streaming-scala_${flinkScalaVersion}:${flinkVersion}"
    compile "org.apache.flink:flink-ml-lib:${flinkVersion}"
//    compile "org.apache.flink:flink-table-api-java-bridge_${flinkScalaVersion}:${flinkVersion}"
//    compile "org.apache.flink:flink-table:${flinkVersion}"
    compile "org.apache.flink:flink-table-planner_${flinkScalaVersion}:${flinkVersion}"
    compile group: 'org.apache.flink', name: 'flink-json', version: flinkVersion
    compile "io.pravega:pravega-client:${pravegaVersion}"
    if (includePravegaCredentials.toBoolean()) {
        compile "io.pravega:pravega-keycloak-client:${pravegaCredentialsVersion}"
    }
    // MongoDB
    // https://mvnrepository.com/artifact/org.mongodb/mongodb-driver
    compile group: 'org.mongodb', name: 'mongodb-driver', version: '3.11.0-rc0'

    // common-library dependencies
    compile "com.google.guava:guava:20.0"
    compile "org.xerial:sqlite-jdbc:3.20.0"
    compile "com.fasterxml.jackson.core:jackson-databind:2.9.1"
}
// Build examples
task scriptJSONReader(type: CreateStartScripts) {
    outputDir = file('build/scripts')
    mainClassName = 'com.dellemc.oe.readers.JSONReader'
    applicationName = 'jsonWriter'
    classpath = files(jar.archivePath) + sourceSets.main.runtimeClasspath
}

task startJSONReader(type: JavaExec) {
    main = "com.dellemc.oe.readers.JSONReader"
    classpath = sourceSets.main.runtimeClasspath
    if(System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
}
// Build examples
task scriptImageReader(type: CreateStartScripts) {
    outputDir = file('build/scripts')
    mainClassName = 'com.dellemc.oe.readers.ImageReader'
    applicationName = 'imageWriter'
    classpath = files(jar.archivePath) + sourceSets.main.runtimeClasspath
}

task startImageReader(type: JavaExec) {
    main = "com.dellemc.oe.readers.ImageReader"
    classpath = sourceSets.main.runtimeClasspath
    if(System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
}

task scriptSqlReader(type: CreateStartScripts) {
    outputDir = file('build/scripts')
    mainClassName = 'com.dellemc.oe.readers.FlinkSQLReader'
    applicationName = 'sqlReader'
    classpath = files(jar.archivePath) + sourceSets.main.runtimeClasspath
}

task startSqlReader(type: JavaExec) {
    main = "com.dellemc.oe.readers.FlinkSQLReader"
    classpath = sourceSets.main.runtimeClasspath
    if(System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
}

shadowJar {
    dependencies {
        exclude(dependency("org.scala-lang:scala-library"))
        exclude(dependency("org.scala-lang:scala-reflect"))
        exclude(dependency("org.scala-lang:scala-compiler"))
    }
    classifier = ""
    zip64 true
}

distributions {
    main {
        baseName = archivesBaseName
        contents {
            into('bin') {
                from project.scriptJSONReader
            }
            into('lib') {
                from(jar)
                from(project.configurations.runtime)
                from shadowJar
                from(project.configurations.shadow)
            }
            into('conf') {
                from(project.file('src/main/resources/logback.xml'))
            }
        }
    }

    publishing {
       repositories {
           maven {
               credentials {
                   username userName
                   password passWord
               }
               url projectRepoUrl
           }
       }

       publications {
           shadow(MavenPublication) { publication ->
               project.shadow.component(publication)
           }
       }
    }
}
